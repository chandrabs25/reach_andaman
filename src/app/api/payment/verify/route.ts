// Path: .\src\app\api\payment\verify\route.ts
import crypto from 'crypto';
import { NextRequest, NextResponse } from 'next/server';

// Function to generate signature for verification
const generateSignature = (
  razorpayOrderId: string,
  razorpayPaymentId: string
): string => { // Add return type
  const keySecret = process.env.RAZORPAY_KEY_SECRET;
  if (!keySecret) {
    // It's better to log this server-side and return a generic error to the client
    console.error('CRITICAL: Razorpay key secret is not configured.');
    throw new Error(
      'Payment processing configuration error.' // More generic message for security
    );
  }

  // Ensure inputs are strings before hashing
  if (typeof razorpayOrderId !== 'string' || typeof razorpayPaymentId !== 'string') {
     console.error('Invalid input types for signature generation:', {
        orderIdType: typeof razorpayOrderId,
        paymentIdType: typeof razorpayPaymentId,
     });
     throw new Error('Invalid data for payment verification.');
  }


  const signature = crypto
    .createHmac('sha256', keySecret)
    .update(razorpayOrderId + '|' + razorpayPaymentId)
    .digest('hex');

  return signature;
};

// --- Define an interface for the expected request body ---
interface VerifyPaymentBody {
    orderCreationId: string; // Assuming this is the Razorpay Order ID from your /order route
    razorpayPaymentId: string;
    razorpayOrderId: string; // Razorpay also sends its order_id in the response
    razorpaySignature: string;
    bookingDetails?: any; // Keep bookingDetails flexible or define a specific type if known
}
// --- End Define Interface ---

export async function POST(request: NextRequest) {
  try {
    // --- FIX: Add type assertion ---
    // Extract payment details from request body
    const {
      orderCreationId, // This should be the Razorpay Order ID
      razorpayPaymentId,
      // razorpayOrderId, // You might receive this too from Razorpay callback
      razorpaySignature,
      bookingDetails
    } = await request.json() as VerifyPaymentBody;
    // --- End of FIX ---

    // Basic validation of received data
    if (!orderCreationId || !razorpayPaymentId || !razorpaySignature) {
        return NextResponse.json(
          { message: 'Missing required payment verification data', isOk: false },
          { status: 400 }
        );
    }


    // Verify payment signature
    // Use the Order ID generated by Razorpay (orderCreationId)
    const calculatedSignature = generateSignature(orderCreationId, razorpayPaymentId);

    if (calculatedSignature !== razorpaySignature) {
       console.warn('Payment verification failed: Signature mismatch.', {
         calculated: calculatedSignature,
         received: razorpaySignature,
         orderId: orderCreationId,
         paymentId: razorpayPaymentId,
       });
      return NextResponse.json(
        { message: 'Payment verification failed', isOk: false },
        { status: 400 }
      );
    }

    // If signature is valid, process the booking
    // TODO: Implement actual booking update logic here
    // Example: Update booking status in your database using bookingDetails or orderCreationId
    console.log('Payment verified successfully', {
      orderCreationId, // Razorpay Order ID
      razorpayPaymentId, // Razorpay Payment ID
      bookingDetails // Any booking info you passed along
    });

    // Update booking status in DB (Example using D1)
    /*
    try {
        await db.prepare("UPDATE bookings SET payment_status = ?, payment_details = ?, status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? OR some_other_identifier = ?")
                .bind(
                    'completed', // New payment status
                    JSON.stringify({ paymentId: razorpayPaymentId, orderId: orderCreationId, signature: razorpaySignature }), // Store payment details
                    'confirmed', // New booking status
                    bookingDetails?.id, // Find booking by internal ID if available
                    orderCreationId // Or find by Razorpay order ID if stored
                )
                .run();
        console.log(`Booking status updated for order ${orderCreationId}`);
    } catch (dbError) {
        console.error(`Failed to update booking status in DB for order ${orderCreationId}:`, dbError);
        // Decide how to handle this - maybe retry or notify admin
        // For now, proceed to return success to Razorpay but log the failure
    }
    */

    return NextResponse.json(
      {
        message: 'Payment verified successfully',
        isOk: true,
        transactionId: razorpayPaymentId,
        orderId: orderCreationId
      },
      { status: 200 }
    );
  } catch (error) {
    // Catch errors from generateSignature or JSON parsing
    console.error('Error verifying payment:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error during payment verification';
    return NextResponse.json(
      {
        message: 'Error verifying payment',
        isOk: false,
        error: errorMessage
      },
      { status: 500 }
    );
  }
}